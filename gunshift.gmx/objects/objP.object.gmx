<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprP</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>magnet_strength = 0;
alarm[1] = 8;


thrust = 0;

thrust_max = 4;
accel = 0.2;
decel = 0.05;
turn_speed = 4;

generation = 0;

make_trails = false;

attachable_create();

shooter_create();

draw_set_font(fonGothic);
draw_set_color(c_red);

instance_create(x, y, objCamera);

// audio
// sorry about this:
global.current_gun_channel = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var guns_max = instance_number(objGun_base);

if (guns_max &gt; 0) {
    for (var i = 0; i &lt; guns_max; i++) { // cycle through all guns
        var current_id = instance_find(objGun_base, i);
        if (collision_circle(x, y, magnet_strength, current_id, true, false) != noone) {
            current_id.image_angle = point_direction(current_id.x, current_id.y, x, y) + 180;
            with (current_id) {
                move_towards_point(objP.x, objP.y, 6);
            }
        }
    }
}


alarm[1] = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
my_trail = instance_create(x, y, objP_trail);
my_trail.image_angle = image_angle;

if (make_trails)
    alarm[0] = TRAIL_TIMER;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// movement
if (keyboard_check(ord('W')) &amp;&amp; thrust &lt;= THRUST_MAX)
    thrust = min(thrust + accel, THRUST_MAX);
else if (keyboard_check(ord('S')))
    thrust = max(thrust - accel, -THRUST_MAX);
else {
    if (thrust &gt; 0)
        thrust = max(thrust - decel, 0);
    else
        thrust = min(thrust + decel, 0);
}


// boost
if (keyboard_check_pressed(ord('E'))) {
    thrust = THRUST_MAX*2.5;
    my_trail = instance_create(x, y, objP_trail);
    my_trail.image_angle = image_angle;
    alarm[0] = TRAIL_TIMER;
}

// boost trails
if ( (thrust &gt; THRUST_MAX || thrust &lt; -THRUST_MAX) ) {
    make_trails = true;
}
else
    make_trails = false;

// debugging
if (keyboard_check(vk_f5))
    game_restart();
    
// rotation      
image_angle = (point_direction(x, y, mouse_x, mouse_y))

while (image_angle &gt;= 360) image_angle -= 360;
while (image_angle &lt; 0) image_angle += 360;


// DEBUG: MAKE EXPLOSIONS
if (mouse_check_button_pressed(mb_left)) {
    explode(mouse_x, mouse_y);
}

// flag for shooting butto
is_shooting = keyboard_check(vk_space);

x += lengthdir_x(thrust, image_angle);
y += lengthdir_y(thrust, image_angle);

// attachables
attachable_update();


// magnetize
if (keyboard_check(ord('F'))) {
    magnet_strength = ease(magnet_strength, MAGNET_MAX, 0.1)
    var create_x = x + choose(-1, 1)*random_range(0, magnet_strength*0.8);
    var create_y = y + choose(-1, 1)*random_range(0, magnet_strength*0.8);
    instance_create(create_x, create_y, objVacuum);
}
else {
    magnet_strength = ease(magnet_strength, 0, 0.4)
}
    





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objOB">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var near_tile = instance_nearest(x, y, objFloor);
var angle = point_direction(x, y, near_tile.x, near_tile.y);
var distance = distance_to_point(near_tile.x, near_tile.y);

x += lengthdir_x(distance*1.5, angle);
y += lengthdir_y(distance*1.5, angle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objWall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (thrust &gt; THRUST_MAX/4)
    thrust = -thrust;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objGun_base">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attachable_collide();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_alpha(0.4);
draw_circle_color(x, y, magnet_strength, c_gray, c_white, false)
draw_set_alpha(1);


draw_self();
//draw_text(x, y, "A " + string(image_angle));
//draw_text(x, y, "global.current_gun_channel = " + string(global.current_gun_channel));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
