<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_audio</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// initialize music audio channels in array (for layering music)
for (var j = 0; j &lt; MAX_MUSIC_CHANNELS; j++) {
    music_layer[j] = audio_emitter_create();
}

// initialize gun audio channels in an array (to cap the total amount of guns that can shoot at the same time)
for (var i = MAX_GUN_CHANNELS; i &gt; 0; i--)
    sfx_channel[i] = audio_emitter_create();

    
music_emitter = audio_emitter_create();
track_position = 0;
music_volume = 1; //0 is silent, 1 is full volume
//audio_sound_gain(current_track, music_volume, 0); //0 means instantaneous, but millaseconds can be used for fade effect



//first song here:
var begin_song = bass_lopass;
audio_play_sound(begin_song,1,false);
var len;
len = audio_sound_length(begin_song);
last_played0 = 0;
last_played1 = -1;
last_played2 = -2;
last_played3 = -3;

alarm[0] = room_speed * len;


// amount of enemies alarm:
enemy_count = 0;
alarm[1] = 3;

len = 0;
length = 0;
flash_speed = 16;
color = c_white;
super_color = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (color != super_color)
    color = super_color;
else
    color = c_black;


// reset alarm if iterations left:  
length = (room_speed*len)/flash_speed;

flash_iteration--;

if (flash_iteration &gt; 0)
    alarm[2] = length;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>max_enemies = instance_number(objE_base);
enemy_count = 0; // accumulator

if (max_enemies &gt; 0) {

    for (var i = 0; i &lt; max_enemies; i++) { // cycle through each enemy
        var current_id = instance_find(objE_base, i);
        
        //if (current_id != noone)
        //    enemy_count++;
        
        // is in view?
        if (current_id.x &gt; view_xview[0] &amp;&amp; 
        current_id.x &lt; view_xview[0] + view_wview[0] &amp;&amp;
        current_id.y &gt; view_yview[0] &amp;&amp; 
        current_id.y &lt; view_yview[0] + view_hview[0]) {
            enemy_count++;
        }
        
    }
}

alarm[1] = 7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// AFTER the first song is played, then do THIS logic:

var choice0;
var choice1;
var choice2;
var choice3;

// Logic:


//enemy_count

var roll;
//First determine channel 0:
switch (last_played0) {
    case 0:
        choice0 = choose(0,1,6,6); // better chance of nothing
        break;
    case 1:
        choice0 = choose(1,6);
        color = set_bonus_color(choice0)
        break;
    case 6:
        choice0 = choose(0,1);
        break;
    default:
        choice0 = 0;
}

//used for next iteration:
last_played0 = choice0;

//channel 1: // drumset
choice1 = choose(4, 5, 6, 6);

//channel 2: // drum break
if ( (choice0 == 6) &amp;&amp; (choice1 == 6) ) {
    choice2 = 2;
    color = set_bonus_color(choice2)
    }
else 
    choice2 = 6;
    
// channel 3: // toms
if (choice2 == 6)
    choice3 = choose(3, 6, 6);
else
    choice3 = 6;
    
if choice3 == 3
    color = set_bonus_color(choice3)



// super color
super_color = color;
    
    
    
// Enums:
channel_0 = set_audioc0(choice0);
channel_1 = set_audioc0(choice1);
channel_2 = set_audioc0(choice2);
channel_3 = set_audioc0(choice3);


// Play the music layers:
if (channel_0 != -1)
    music_layer[0] = audio_play_sound(channel_0,1,false);
    
if (channel_1 != -1)
    music_layer[1] = audio_play_sound(channel_1,1,false);
    
if (channel_2 != -1)
    music_layer[2] = audio_play_sound(channel_2,1,false);
    
if (channel_3 != -1)
    music_layer[3] = audio_play_sound(channel_3,1,false);


//used to repeate: 
if (audio_is_playing(music_layer[0]))
    len = audio_sound_length(music_layer[0]);
    
else if (audio_is_playing(music_layer[1]))
    len = audio_sound_length(music_layer[1]);
    
else if (audio_is_playing(music_layer[2]))
    len = audio_sound_length(music_layer[2]);
    
else
    len = audio_sound_length(music_layer[3]);


alarm[0] = room_speed * len;

    //used to flash every beat:    
super_roll = choose(0, 0, 1);
if (super_roll == 1) {
    flash_speed = choose(16, 32);
    length = (room_speed*len)/flash_speed;
    flash_iteration = flash_speed - 1;
    alarm[2] = length;
}

// used by rotating walls in level
objWall_rotate.turn_amount = choose(-1, 1)*choose(22.5, 45); //in degrees
objWall_rotate.turn_speed = choose(length/8, length/16);

objWall_circle.scale_amount = choose(8, 10, 12);
objWall_circle.alarm_speed = choose(length/2, length/4);

// used by bullets
objBullet.timing = choose(length/16, length/32);

// enemies
objE_base.timing = choose(length/8, length/16);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_listener_position(objP.x, objP.y, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_alpha(0.3);
draw_rectangle_colour(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], color, color, color, color, false);
draw_set_alpha(1);

draw_text(view_xview[0] + view_wview[0]/6, view_yview[0] + 16, "Enemies on Screen: " + string(enemy_count));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
